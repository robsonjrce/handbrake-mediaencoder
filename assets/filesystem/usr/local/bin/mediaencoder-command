#!/bin/bash

JOB_SET_BASEDIR=""
JOB_SET_DESTDIR=""
JOB_SET_ENFORCE="n"
JOB_SET_SRC_FILENAME=""

JOB_SRC_FILENAME=""
JOB_DST_FILENAME=""
JOB_VERSION="/tmp/job-$(od -An -N2 -i /dev/random | sed -e 's/^[ \t]*//' -e 's/[ \t]*$//')"
JOB_FILE_SUFFIX=""
JOB_FILE_EXT=""
JOB_EXIT_CODE="1"
PRESET_FILE=""
PRESET_NAME=""

# will make the temporary folder for the job
mkdir -p "${JOB_VERSION}"

# the main objective is to find all subtitles that match the initial fullpath name
# so we can remove this and append the subtitle suffix metadata to the destination
# ex:
# find filenames that start with "/mnt/folder1/collection/movie with long name"
#   ["/mnt/folder1/collection/movie with long name.por.srt",
#    "/mnt/folder1/collection/movie with long name.eng.srt"
#    "/mnt/folder1/collection/movie with long name.eng.forced.srt"]
# then we will remove the base and replace it with the destination
#   ["<destination path filename>.por.srt",
#    "<destination path filename>.eng.srt"
#    "<destination path filename>.eng.forced.srt"]
copy-subtitles() {
  local enforce="$1"

  local filename_src_fullpath=$(readlink -f "${JOB_SET_SRC_FILENAME}")
  local filename_src_fullpath_no_ext="${filename_src_fullpath%.*}"
  local filename_src_fullpath_folder="${filename_src_fullpath_no_ext%/*}"
  local filename_src_basename="${filename_src_fullpath_no_ext##*/}"

  local filename_dst_fullpath_dest_no_ext="${JOB_DST_FILENAME}"
  local filename_dst_fullpath_folder="${filename_dst_fullpath_dest_no_ext%/*}"

  OIFS="$IFS"
  IFS=$'\n'
  for file in `find "${filename_src_fullpath_folder}" -type f -iname "${filename_src_basename}*.srt"`  
  do
    local filename_dst_fullpath="${filename_dst_fullpath_dest_no_ext} - ${JOB_FILE_SUFFIX}${file#$filename_src_fullpath_no_ext}"

    if [[ "${enforce}" =~ y || ! -f "${filename_dst_fullpath}" ]]; then
      cp --remove-destination "${file}" "${filename_dst_fullpath}"
    fi
  done
  IFS="$OIFS"
}

set-basedir() {
  local str_basedir="$1"
  JOB_SET_BASEDIR="${str_basedir}"
  update-metadata
}

set-destdir() {
  local str_destdir="$1"
  JOB_SET_DESTDIR="${str_destdir}"
  update-metadata
}

set-filename() {
  local str_destdir="$1"
  JOB_SET_SRC_FILENAME="${str_destdir}"
  update-metadata
}

set-option() {
  local arg="$1"
  local key=$(echo $arg | cut -d '=' -f1)
  local val=$(echo $arg | cut -d '=' -f2)

  case "$key" in
    "bitrate")
      update-json ".PresetList[0].VideoAvgBitrate"  "$val"
      update-json ".PresetList[0].VideoQualityType" "1"
      update-json ".PresetList[0].x264Option"       ""
    ;;

    "rf")
      update-json ".PresetList[0].VideoQualitySlider" "$val"
    ;;
  esac

  # setup suffix for filename
  if [ -z "${JOB_FILE_SUFFIX}" ]; then
    JOB_FILE_SUFFIX="${PRESET_FILE},${key}=${val}"
  else
    JOB_FILE_SUFFIX="${JOB_FILE_SUFFIX},${key}=${val}"
  fi
}

set-preset() {
  local preset="$1"
  PRESET_FILE="${preset}"

  if [ -f "/etc/mediaencoder/presets/${preset}.json" ]; then
    # choose preset name
    cp "/etc/mediaencoder/presets/${preset}.json" "${JOB_VERSION}/preset.json"
    PRESET_NAME=$(jq -r .PresetList[0].PresetName "${JOB_VERSION}/preset.json")

    # choose video file extension based on video container
    local video_format=$(jq -r .PresetList[0].FileFormat "${JOB_VERSION}/preset.json")
    case "${video_format}" in
      "av_mp4")
        JOB_FILE_EXT="mp4"
      ;;

      "av_mkv")
        JOB_FILE_EXT="mkv"
      ;;
    esac
  else
    echo ":: preset ${preset} not found"
    exit 1
  fi
}

update-json() {
  local jq_search="$1"
  local jq_value="$2"
  local jq_query=""

  if [ -z "${jq_value}" ]; then
    jq_query="( del(${jq_search}) )"
  else
    jq_query="( ${jq_search} ) |= ${jq_value}"
  fi

  jq "${jq_query}" "${JOB_VERSION}/preset.json" > "${JOB_VERSION}/preset.json-update"
  rm "${JOB_VERSION}/preset.json"
  mv "${JOB_VERSION}/preset.json-update" "${JOB_VERSION}/preset.json"
}

# will check for data set and update the destinations accordingly
update-metadata() {
  if [[ -n "${JOB_SET_DESTDIR}" && -n "${JOB_SET_SRC_FILENAME}" ]]; then
    local filename_fullpath=$(readlink -f "${JOB_SET_SRC_FILENAME}")
    local filename_fullpath_no_ext="${filename_fullpath%.*}"
    local filename="${filename_fullpath##*/}"
    local filename_no_ext="${filename%.*}"

    JOB_SRC_FILENAME="${filename_fullpath}"

    # when BASEDIR is supplied we shall remove it from filename path so we can build the
    # same directory structure for de DESTDIR
    #
    # ex1: the file and the folder structure will be rendered in destination dir
    #      filename => /mnt/folder1/folder2/file.mkv
    #      basedir => /mnt/folder1
    #      destdir => /mnt/folder3
    #      filename_dest => /mnt/folder3/folder2/file.mkv
    #
    # ex2: the file will be rendered on destination dir
    #      filename => /mnt/folder1/folder2/file.mkv
    #      basedir => 
    #      destdir => /mnt/folder3
    #      filename_dest => /mnt/folder3/file.mkv
    if [ -n "$JOB_SET_BASEDIR" ]; then
      JOB_DST_FILENAME="${JOB_SET_DESTDIR}/${filename_fullpath_no_ext#$JOB_SET_BASEDIR}"
    else
      JOB_DST_FILENAME="${JOB_SET_DESTDIR}/${filename_no_ext}"
    fi
  fi
}

while getopts ":hb:d:ef:o:p:" opt; do
    case "$opt" in
        b) set-basedir "$OPTARG" ;;
        d) set-destdir "$OPTARG" ;;
        e) JOB_SET_ENFORCE="y" ;;
        f) set-filename "$OPTARG" ;;
        h) echo "help" ;;
        o) set-option "$OPTARG" ;;
        p) set-preset "$OPTARG" ;;
        "?") echo "Unknown option: -$OPTARG"; usage 1 ;;
        ":") echo "No argument value for option: -$OPTARG"; usage 2 ;;
    esac
done
shift $(( OPTIND - 1 ))

# ensure destination directory based on final file name
mkdir -p "${JOB_DST_FILENAME%/*}"

# will encode only if the file is missing
if [[ "${JOB_SET_ENFORCE}" =~ y || ! -f "${JOB_DST_FILENAME} - ${JOB_FILE_SUFFIX}.${JOB_FILE_EXT}" ]]; then
  HandBrakeCLI \
    --preset-import-file "${JOB_VERSION}/preset.json" \
    -Z "${PRESET_NAME}" \
    --first-audio \
    -i "${JOB_SRC_FILENAME}" \
    -o "${JOB_DST_FILENAME} - ${JOB_FILE_SUFFIX}.${JOB_FILE_EXT}"
  JOB_EXIT_CODE="$?"
fi

# only proceed to copy subtitle if the conversion job was successful
if [[ "${JOB_EXIT_CODE}" =~ 0 ]]; then
  # will copy subtitles enforcing overwrite when specified
  copy-subtitles "${JOB_SET_ENFORCE}"
fi

# will clean the temporary folder
rm -rf "${JOB_VERSION}"